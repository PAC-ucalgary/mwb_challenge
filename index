<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Prevent indexing (add robots.txt in repo too) -->
  <meta name="robots" content="noindex, nofollow" />
  <title>MWB Volunteer Challenge – Live Leaderboard</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg-1:#0f0d10;          /* page background */
      --bg-2:#1a161b;          /* card background */
      --bg-3:#221e24;          /* header/nav background */
      --brand:#b34445;         /* MWB maroon (derived from logo) */
      --brand-2:#f9f5f2;       /* light accent */
      --text:#e9e7ea;          /* primary text */
      --muted:#b5aebd;         /* secondary text */
      --success:#3ddc97;       /* status green */
      --gold:#d4af37;          /* 1st */
      --silver:#c0c0c0;        /* 2nd */
      --bronze:#cd7f32;        /* 3rd */
      --radius:18px;
      --shadow:0 10px 30px rgba(0,0,0,.35);
      --shadow-soft:0 8px 20px rgba(0,0,0,.25);
      --maxw:1120px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
      color:var(--text);
      background:
        radial-gradient(80% 120% at 10% 10%, rgba(179,68,69,.25), rgba(179,68,69,0) 60%),
        radial-gradient(70% 90% at 100% 10%, rgba(120,41,42,.35), rgba(120,41,42,0) 60%),
        linear-gradient(180deg, #120f13, #0b0a0c 60%);
      background-attachment:fixed;
    }
    a{color:var(--brand)}
    .wrap{max-width:var(--maxw); margin:0 auto; padding:28px 20px 56px}
    /* Header */
    header{
      position:sticky; top:0; z-index:30;
      backdrop-filter:saturate(120%) blur(8px);
      background:linear-gradient(180deg, rgba(19,16,20,.9), rgba(19,16,20,.55));
      border-bottom:1px solid rgba(255,255,255,.06);
    }
    .nav{display:flex; align-items:center; justify-content:space-between; gap:14px; max-width:var(--maxw); margin:0 auto; padding:12px 20px}
    .brand{display:flex; align-items:center; gap:12px}
    .brand img{height:40px; width:auto; border-radius:10px; box-shadow:var(--shadow-soft)}
    .brand h1{font-size:18px; margin:0; letter-spacing:.3px}
    .actions{display:flex; gap:10px; flex-wrap:wrap}
    .btn{appearance:none; border:0; padding:10px 14px; border-radius:12px; background:var(--bg-2); color:var(--text);
      box-shadow:var(--shadow-soft); cursor:pointer; font-weight:600; letter-spacing:.2px}
    .btn.primary{background:linear-gradient(180deg, #c55355, #8b2d2e); color:#fff}
    .btn:focus-visible{outline:2px solid var(--brand)}

    /* Hero */
    .hero{display:flex; align-items:center; justify-content:space-between; gap:28px; margin-top:24px; flex-wrap:wrap}
    .hero .tag{display:inline-flex; align-items:center; gap:8px; background:rgba(179,68,69,.15); border:1px solid rgba(179,68,69,.35); color:#ffdede; padding:6px 10px; border-radius:999px; font-size:12px; font-weight:700; text-transform:uppercase; letter-spacing:.5px}
    .hero h2{font-size:28px; margin:10px 0 8px}
    .hero p{margin:0; color:var(--muted)}

    /* Grid */
    .grid{display:grid; grid-template-columns:1fr 1fr; gap:18px; margin-top:24px}
    @media (max-width:900px){.grid{grid-template-columns:1fr}}

    .card{background:var(--bg-2); border:1px solid rgba(255,255,255,.06); border-radius:var(--radius); padding:16px; box-shadow:var(--shadow)}
    .card h3{margin:0 0 12px; font-size:18px}
    .card small{color:var(--muted)}

    table{width:100%; border-collapse:separate; border-spacing:0 8px}
    th,td{text-align:left; padding:10px 12px; font-size:14px}
    thead th{color:#d9d4de; font-weight:700; text-transform:uppercase; letter-spacing:.4px; font-size:12px}
    tbody tr{background:#17141a; border:1px solid rgba(255,255,255,.06)}
    tbody tr td:first-child{border-top-left-radius:12px; border-bottom-left-radius:12px}
    tbody tr td:last-child{border-top-right-radius:12px; border-bottom-right-radius:12px}

    .rank-badge{display:inline-block; min-width:28px; text-align:center; font-weight:800; padding:4px 8px; border-radius:8px}
    .rank-1{background:linear-gradient(180deg, var(--gold), #9a7d1d); color:#1b1504}
    .rank-2{background:linear-gradient(180deg, var(--silver), #8f8f8f); color:#0f1012}
    .rank-3{background:linear-gradient(180deg, var(--bronze), #8a4f1d); color:#160d07}

    .note{margin-top:10px; color:#d6d0dc}
    .warn{color:#ffd3d3}

    footer{margin-top:36px; color:var(--muted); text-align:center}
    .faint{opacity:.8}
    .hidden{display:none}
  </style>
</head>
<body>
  <header>
    <div class="nav">
      <div class="brand">
        <!-- Replace src with your repo asset path (e.g., assets/mwb-logo.png) -->
        <img src="assets/mwb-logo.png" alt="MWB logo" />
        <h1>MWB Volunteer Challenge</h1>
      </div>
      <div class="actions">
        <!-- Replace href with your Challenge Info doc link -->
        <a class="btn" href="#info" id="openInfo">Challenge Info</a>
        <a class="btn primary" href="#yearly">Full Leaderboard</a>
      </div>
    </div>
  </header>

  <main class="wrap">
    <section class="hero">
      <div>
        <span class="tag">Live Leaderboard</span>
        <h2>Track your team’s progress, celebrate top volunteers, and see who’s leading this month.</h2>
        <p class="faint">Data refreshes automatically every 60 seconds • Live from Google Sheets</p>
      </div>
    </section>

    <section id="info" class="card" style="margin-top:18px">
      <h3>How It Works</h3>
      <p style="margin-top:8px; line-height:1.6">
        Form a team of 3–5 members and earn points by volunteering at MWB events like bake sales, bazaars, and annual dinners.
        Each member’s points contribute to the team total, which is averaged for fairness. Monthly winners take prizes, scores
        reset each month, and cumulative points determine the grand prize at year’s end. To qualify for rewards, each member must
        contribute at least 10% of their team’s total points.
      </p>
    </section>

    <div class="grid">
      <!-- Monthly Team Leaderboard -->
      <section id="monthlyTeams" class="card">
        <h3>Monthly Team Leaderboard <small id="monthLabel"></small></h3>
        <div id="monthlyTeamsError" class="hidden warn">Could not load team data. Please check the Google Sheet links.</div>
        <table>
          <thead>
            <tr>
              <th>Rank</th>
              <th>Team</th>
              <th>Members</th>
              <th>Average Points</th>
            </tr>
          </thead>
          <tbody id="monthlyTeamsBody"></tbody>
        </table>
        <div class="note">A team’s average = total team points ÷ number of members.</div>
      </section>

      <!-- Top Volunteers (Monthly) -->
      <section id="topVolunteers" class="card">
        <h3>Top Volunteers <small id="monthLabel2"></small></h3>
        <div id="topVolsError" class="hidden warn">Could not load volunteer data. Please check the Google Sheet links.</div>
        <table>
          <thead>
            <tr>
              <th>Rank</th>
              <th>Name</th>
              <th>Team</th>
              <th>Points</th>
            </tr>
          </thead>
          <tbody id="topVolunteersBody"></tbody>
        </table>
      </section>
    </div>

    <!-- Yearly Overall Leaderboard -->
    <section id="yearly" class="card" style="margin-top:18px">
      <h3>Yearly Overall Standings</h3>
      <div id="yearlyError" class="hidden warn">Could not load yearly standings.</div>
      <table>
        <thead>
          <tr>
            <th>Rank</th>
            <th>Team</th>
            <th>Total Points (Year)</th>
          </tr>
        </thead>
        <tbody id="yearlyBody"></tbody>
      </table>
      <div class="note warn" style="margin-top:12px">Eligibility: To win prizes, each team member must contribute at least 10% of their team’s total points.</div>
    </section>

    <footer>
      <p>Built for MWB • Live data from Google Sheets • Auto-refreshes every minute</p>
    </footer>
  </main>

  <script>
    /* ============================
       CONFIG – Set your CSV links
       ============================ */
    // Publish each Google Sheet to the web (File → Share → Publish to web → CSV) and paste URLs below.
    const INDIVIDUAL_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQB94ZwTlKNFsY10SeVArbMcwC5BM3qkP1I2_er_WL6V657H1Aje4ZoidJSbAXRc21Zoxie2vdeGyek/pub?gid=759346056&single=true&output=csv"; // columns: name, team, points (no date/month)
    const TEAM_CSV_URL       = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQB94ZwTlKNFsY10SeVArbMcwC5BM3qkP1I2_er_WL6V657H1Aje4ZoidJSbAXRc21Zoxie2vdeGyek/pub?gid=0&single=true&output=csv"; // columns: team, members
    const YEARLY_CSV_URL    = ""; // optional: if set, used for Yearly standings

    // Optional: set the month to display (e.g., "2025-10"). If empty, uses current month.
    const FIXED_MONTH = ""; // format YYYY-MM

    /* ============================
       Utility helpers
       ============================ */
    const $ = (sel) => document.querySelector(sel);

    function thisMonthKey(){
      if (FIXED_MONTH) return FIXED_MONTH;
      const d = new Date();
      const y = d.getFullYear();
      const m = String(d.getMonth()+1).padStart(2,'0');
      return `${y}-${m}`; // YYYY-MM
    }

    function monthLabel(key){
      const [y,m] = key.split('-').map(Number);
      const date = new Date(y, m-1, 1);
      const fmt = new Intl.DateTimeFormat(undefined,{month:'long', year:'numeric'});
      return fmt.format(date);
    }

    // Basic CSV parser that handles quoted fields
    function parseCSV(text){
      const rows = [];
      let i=0, field='', row=[], inQuotes=false;
      while(i < text.length){
        const c = text[i];
        if(c==='"'){
          if(inQuotes && text[i+1]==='"'){ field+='"'; i++; }
          else { inQuotes = !inQuotes; }
        } else if(c===',' && !inQuotes){ row.push(field); field=''; }
        else if((c==='\n' || c==='\r') && !inQuotes){ if(field!=='' || row.length){ row.push(field); rows.push(row); row=[]; field=''; } }
        else { field += c; }
        i++;
      }
      if(field!=='' || row.length){ row.push(field); rows.push(row); }
      // trim BOM header issues
      return rows.filter(r=>r.length && r.join('').trim()!=='' );
    }

    async function fetchCSV(url){
      const res = await fetch(url, {cache:'no-store'});
      if(!res.ok) throw new Error(`HTTP ${res.status}`);
      const text = await res.text();
      const rows = parseCSV(text);
      const headers = rows[0].map(h=>h.trim().toLowerCase());
      const data = rows.slice(1).map(r=>{
        const obj={};
        headers.forEach((h,idx)=> obj[h] = (r[idx]||'').trim());
        return obj;
      });
      return data;
    }

    function number(n){
      const x = parseFloat(String(n).replace(/[^0-9.\-]/g,''));
      return isNaN(x)?0:x;
    }

    function renderRows(tbody, rows, rowRenderer){
      tbody.innerHTML = '';
      rows.forEach((obj, idx)=>{
        const tr = document.createElement('tr');
        tr.innerHTML = rowRenderer(obj, idx);
        tbody.appendChild(tr);
      });
    }

    function rankBadge(idx){
      const r = idx+1;
      const cls = r===1? 'rank-badge rank-1' : r===2? 'rank-badge rank-2' : r===3? 'rank-badge rank-3' : 'rank-badge';
      return `<span class="${cls}">${r}</span>`;
    }

    /* ============================
       Core Loading Logic
       ============================ */
    async function loadData(){
      const monthKey = thisMonthKey();
      // Labels
      $('#monthLabel').textContent = `• ${monthLabel(monthKey)}`;
      $('#monthLabel2').textContent = `• ${monthLabel(monthKey)}`;

      try {
        const [individuals, teams] = await Promise.all([
          fetchCSV(INDIVIDUAL_CSV_URL),
          fetchCSV(TEAM_CSV_URL)
        ]);

        // teamMembers: {TeamName: memberCount}
        const teamMembers = teams.reduce((acc,row)=>{
          const name = (row.team||row["team name"]||'').trim();
          const count = number(row.members || row.membercount || row["members"]);
          if(name) acc[name]=count||0; return acc;
        },{});

        // In Option B, the sheet only contains the current month. No filtering needed.
        const monthData = individuals;

        // ----- Monthly Teams (average) -----
        const teamTotals = {};
        monthData.forEach(v=>{
          const team = (v.team||'').trim() || '—';
          teamTotals[team] = (teamTotals[team]||0) + number(v.points||v.score||v["pts"]);
        });

        const monthlyTeams = Object.entries(teamTotals).map(([team,total])=>{
          const members = teamMembers[team] || 0;
          const avg = members>0 ? total / members : 0;
          return {team, members, total, avg};
        }).sort((a,b)=> b.avg - a.avg);

        renderRows($('#monthlyTeamsBody'), monthlyTeams, (row, idx)=>`
          <td>${rankBadge(idx)}</td>
          <td>${row.team}</td>
          <td>${row.members}</td>
          <td><strong>${row.avg.toFixed(2)}</strong></td>
        `);
        $('#monthlyTeamsError').classList.add('hidden');

        // ----- Top Volunteers (month) -----
        const volunteers = monthData.map(v=>({
          name:(v.name||v.volunteer||'').trim()||'—',
          team:(v.team||'').trim()||'—',
          points:number(v.points||v.score||v["pts"])
        })).sort((a,b)=> b.points - a.points).slice(0,20);

        renderRows($('#topVolunteersBody'), volunteers, (row, idx)=>`
          <td>${rankBadge(idx)}</td>
          <td>${row.name}</td>
          <td>${row.team}</td>
          <td><strong>${row.points}</strong></td>
        `);
        $('#topVolsError').classList.add('hidden');

        // ----- Yearly Overall by Team -----
        // If YEARLY_CSV_URL is provided, use that source; otherwise fall back to current sheet (will equal current month).
        let yearlySource = individuals;
        try {
          if (typeof YEARLY_CSV_URL !== 'undefined' && YEARLY_CSV_URL){
            yearlySource = await fetchCSV(YEARLY_CSV_URL);
          }
        } catch(e){ console.warn('Yearly CSV failed, falling back to current sheet'); }

        const yearlyTotals = yearlySource.reduce((acc,v)=>{
          const team=(v.team||'').trim()||'—';
          acc[team]=(acc[team]||0) + number(v.points||v.score||v['pts']);
          return acc;
        },{});
        const yearly = Object.entries(yearlyTotals).map(([team,total])=>({team,total}))
                        .sort((a,b)=> b.total - a.total);

        renderRows($('#yearlyBody'), yearly, (row, idx)=>`
          <td>${rankBadge(idx)}</td>
          <td>${row.team}</td>
          <td><strong>${row.total}</strong></td>
        `);
        $('#yearlyError').classList.add('hidden');

      } catch (err){
        console.error(err);
        $('#monthlyTeamsError').classList.remove('hidden');
        $('#topVolsError').classList.remove('hidden');
        $('#yearlyError').classList.remove('hidden');
      }
    }

    loadData();
    // Auto-refresh every 60s
    setInterval(loadData, 60_000);
  </script>
</body>
</html>
